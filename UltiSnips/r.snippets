snippet link "Roxygen2 link"
\code{\link[${2:package}]{${1:function}}}
endsnippet

snippet inputTest "testthat input assertions"
  lsimrs:::log_fun()
  # input tests
  assertthat::assert_that(${2:is.what?}(${1:argument}),
    msg = "Dem Argument \"$1\" wurde kein ${3:Zeichenkettenvektor} zugewiesen."
  )
  ${4:
  assertthat::assert_that(
    is.list(l) &&
      !is.data.frame(l) &&
      !tibble::is_tibble(l),
    msg = "Dem Argument \"l\" wurde keine Liste zugewiesen."
  )
  }
  # end input tests
endsnippet
snippet test "testthat snippet"
testthat::test_that(desc = "${1:description}", code = {
  # input tests
  testthat::expect_error(lsimrs:::${2:function name}(${3:argument name} = 1))
  testthat::expect_error(lsimrs:::$2($3 = data.frame(a = 1)))
  testthat::expect_error(lsimrs:::$2($3 = list(a = 1)))
  testthat::expect_error(lsimrs:::$2($3 = NULL))
  testthat::expect_error(lsimrs:::$2($3 = NA))
  testthat::expect_silent(lsimrs:::$2($3 = "***TABLE***"))
  testthat::expect_silent(lsimrs:::$2($3 = "abcdef...xyz"))
  testthat::expect_silent(lsimrs:::$2($3 = ""))
  # output tests

  ## arrange
  args <- list($4)
  expectations <- list($5)
  purrr::walk2(
    .x = args,
    .y = expectations,
    .f = function(arg, expectation) {
      ## act
      object <- lsimrs:::$2($3 = arg)
      ## assert
      testthat::expect_equal(
        object = object,
        expected = expectation
      )
        })
})
endsnippet
snippet clih3 "cli header 3 message"
cli::cli_h3(paste0("$1"))
endsnippet
snippet clih2 "cli header 2 message"
cli::cli_h2(paste0("$1"))
endsnippet
snippet clih1 "cli header 1 message"
cli::cli_h1(paste0("$1"))
endsnippet
snippet clisuc "cli alert success message"
cli::cli_alert_success(paste0("$1"))
endsnippet
snippet cliwar "cli alert alert"
cli::cli_alert_info(paste0("$1"))
endsnippet
snippet clidan "cli warning"
cli::cli_alert_danger(paste0("$1"))
endsnippet
snippet clidiv "set theme from R cli package"
{
cli::cli_div(theme = list(span.$1 = list(color = "$1")))
$2
cli::cli_end()
}
endsnippet
snippet clitex "write text - R cli package"
cli::cli_text(paste0("$0"))
endsnippet
snippet rproj "insert dummy .Rproj-file"
Version: 1.0

RestoreWorkspace: No
SaveWorkspace: No
AlwaysSaveHistory: No

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: knitr
LaTeX: XeLaTeX
endsnippet
snippet clilis "cli list"
{
cli::cli_ol()
cli::cli_li("Item 1")
cli::ulid <- cli_ul()
cli::cli_li("Subitem 1")
cli::cli_li("Subitem 2")
cli::cli_end(ulid)
cli::cli_li("Item 2")
cli::cli_end()
}
endsnippet

snippet clidivs "Many cli divs"
cli::cli_div(theme = list(span.orange = list(color = "orange"),
                          span.red = list(color = "red"),
                          span.green = list(color = "green"),
                          span.blue = list(color = "blue")))
cli::cli_end()
endsnippet

snippet rcl "R command line tool header"
#!/usr/bin/Rscript --vanilla
#======================================================
# Command line formatter for R scripts
#------------------------------------------------------
# Philipp van Wickevoort Crommelin
#======================================================
ARGV <- commandArgs(trailingOnly = TRUE)

# Install dependencies if required {{{

if (! "cli" %in% installed.packages()[,"Package"]) {
  tryCatch(expr = {
  remotes::install_github("r-lib/cli")
},
warning = function(w){
  simpleWarning(message = w)
},
error = function(e){
  stop(e)
})
}

#}}}
endsnippet
snippet ggs "ggsave standard png"
ggsave(filename = "$0.png",
       path = plots,
       device = "png",
       width = 11,
       height = 7)
endsnippet

snippet theme "parcIT theme"
theme_minimal(base_size = 24,
              base_family = "Calibri") +
theme(legend.position = "bottom",
      axis.line.y = element_line(color = "black")) +
geom_hline(yintercept = 0,
           size = 0.4) +
scale_y_continuous(labels = scales::number_format(accuracy = 0.01,
                                          big.mark = ".",
                                          decimal.mark = ',')) +
endsnippet

snippet cols "parcIT colors"
# Farben der parcIT {{{
COL_PARCIT <- c(  
  # Blau
  grDevices::rgb(red = 0  , green =  102, blue = 179, maxColorValue = 255)
  # Orange
  ,grDevices::rgb(red = 255, green =  102, blue = 0  , maxColorValue = 255)
  # Gruen
  ,grDevices::rgb(red = 138, green =  192, blue = 86 , maxColorValue = 255)
  # Hellblau
  ,grDevices::rgb(red = 135, green =  208, blue = 234, maxColorValue = 255)
  # Kaffee
  ,grDevices::rgb(red = 173, green =  159, blue = 129, maxColorValue = 255)
  # Silber
  ,grDevices::rgb(red = 178, green =  178, blue = 178, maxColorValue = 255)
  # Turquoise
  ,grDevices::rgb(red = 86 , green =  188, blue = 177, maxColorValue = 255)
)
# }}}
endsnippet
snippet lib "library" 
library($0)
endsnippet

snippet sap "sapply" 
sapply(X = $1
	,FUN = function(${2:i}){
	$0
})
endsnippet

snippet pltn "plot NULL"
plot(
   x = NULL
  ,y = NULL
  ,main = $1
  ,xlim = $2
  ,ylim = $3
  ,xlab = $4
  ,ylab = $5
)
endsnippet

snippet points "draw points"
points(
   x = ${1: x coordinates}
  ,y = ${2: y coordinates}
  ,cex = ${3: size of points}
  ,pch = ${4: point character}
  ,col = ${5: color}
)
endsnippet

snippet lines "draw points"
lines(
   x = ${1: x coordinates}
  ,y = ${2: y coordinates}
  ,lwd = ${3: line witdh}
  ,lty = ${4: line type}
  ,col = ${5: color}
)
endsnippet

snippet pointsLines "draw points and lines"
lines(
   x = ${1: x coordinates}
  ,y = ${2: y coordinates}
  ,lwd = ${3:1}
  ,lty = ${4:1}
  ,col = ${5:"purple"}
)
points(
   x = $1
  ,y = $2
  ,cex = ${6:2}
  ,pch = ${7:16}
  ,col = $5
)
endsnippet


snippet leg	"legend"
legend(
   x = "${1:topleft}"
  ,leg = "${2:a line}"
  ,lwd = ${3:1}
  ,lty = ${4:1}
  ,cex = ${5:NA}
  ,pch = ${6:NA}
  ,bg = "${7:#FFFFFF77}"
)
endsnippet



snippet fun "function"
${1:myFunction} <- function(${2:parameters}){
  $0
}
endsnippet

snippet pas "paste0"
paste0($1)
endsnippet

snippet head "Title of an R script"
#======================================================
# $1
# JIRA-Ticket $2
#------------------------------------------------------
# Philipp van Wickevoort Crommelin (pvwc)
# parcIT GmbH
#======================================================
# Pakete und globale Konfigurationen {{{
# Einzubindende Pakete
# Anzulegende Verzeichnisse
if (!exists("projectPath")) {
  stop(
    paste0(
      "Im Urverzeichnis des Git-Projektes muss die Datei ",
      "\".Rprofile\" existieren und folgende Zeile ",
      "R-Code enthalten:\n",
      "projectPath <- \"pfad/zu/meinem/Git-Projekt-Ordner/\"\n",
      "Der Pfadname sollte ein abschliessenden Slash (\"/\") ",
      "beinhalten."
    )
  )
} else {
  setwd(projectPath)
}
plots <-
  paste0(
    projectPath,
    "$3",
    "Grafiken/"
  )
if (!(dir.exists(paths = plots))) {
  dir.create(path = plots)
}
excels <-
  paste0(
    projectPath,
    "$4",
    "ExcelTabellen/"
  )
if (!(dir.exists(paths = excels))) {
  dir.create(path = excels)
}
# }}}
endsnippet

snippet doc "roxygen documentation"
#' @title ${1:Title}
#' @description ${2:Description.}
#' @param ${3:Parameter name} (\strong{${4:data type}}) ${5:Parameter description.}
#' @return (\strong{${6:data type}}) ${7:Description of return value.}
#' @details ${8:Details.}
#' @importFrom ${9:R package} ${10:function}
#' @template parcit
endsnippet

########################################
########## visual mode snippets ########
########################################

snippet pasv "paste0"
paste0(${VISUAL},$0)
endsnippet


snippet marker "vimscript marker"
# $0 {{{

${VISUAL}

#}}}
endsnippet

snippet try "tryCatch block"
  tryCatch(
  error = function(cnd){},
  warning = function(cnd){},
  expr = {
  ${VISUAL}
  })
endsnippet

snippet clidivv "put into cli div"
{
cli::cli_div(theme = list(span.$1 = list(color = "$1")))
${VISUAL}
cli::cli_end()
}
endsnippet

snippet if "put into if conditional environment"
if ($0) {
${VISUAL}
}
endsnippet

snippet paren "put into parenthesis"
$0(${VISUAL})
endsnippet

snippet modu "Shiny module UI function"
${1:moduleNameUI} <- function(id) {
  tagList(
  ${2:
    textInput(
      inputId = NS(
        namespace = id,
        id = "i"
      ),
      label = "Text input"
    ),
    textOutput(outputId = NS(
      namespace = id,
      id = "o"
    ),
    label = "Text Output")
    }
  )
}
endsnippet


snippet mods "Shiny module server function"
${1:moduleName}Server <- function(id) {
  moduleServer(
    id = id,
    module = function(input, output, session) {
    ${2:
    output$o <- renderText(x = {input$i})
    }
    }
  )
}
endsnippet

snippet serv "Shiny server function"
server <- function(input,output,session){
${0:declarative server code}
}
endsnippet

