#!/usr/bin/Rscript
# ======================================================
# Installation or update of nvimcom
# and deposition of source and binary installation
# into renv's local package library /renv/local
# acording to
# https://rstudio.github.io/renv/articles/local-sources.html
#
# Info: Package nvimcom is part of the vim plugin Nvim-R:
# https://github.com/jalvesaq/Nvim-R/tree/master/R/nvimcom
#------------------------------------------------------
# Voraussetzungen:
# 1.  Die .Rprofile-Datei ist im Wurzel-Verzeichnis
#     des Renv- bzw. Git-Projektes (gleiches Projekt)
#     zu hinterlegen.
# 2.  Die Variable "projectPath" muss den Pfad zum
#     Projektordner enthalten und in .Rprofile definiert
#     sein.
#------------------------------------------------------
# Philipp van Wickevoort Crommelin
# ======================================================
if (!exists("projectPath")) {
  stop("Variable \"projectPath\" unknown")
}
pathNvimcom <- paste0(
  "/home/philipp/.config/nvim/",
  "plugged/Nvim-R/R/nvimcom/"
)

if (!dir.exists(projectPath)) {
  stop(paste0("Path '", pathNvimcom, "' does not exist"))
}

# Binary-Paket archivieren und ablegen

# Dependency installation (turned off) {{{

# Identifiziere und installiere ggf. Abhaengigkeiten
# des Pakets "Nvimcom"
# Abhaengigkeiten aus der DESCRIPTION-Datei
# Beruecksichtigt leider nur die DESCRIPTION-Datei und
# nicht zusaetzlich die NAMESPACE-Datei.

# Check devtools dependency first
#   if (!("devtools" %in% installed.packages()[, "Package"])) {
#     tryCatch(
#       expr = {
#         cat(paste0(
#           "### Install devtools first ###\n",
#           "### This is done only once ###\n"
#         ))
#         install.packages("devtools")
#         cat("### devtools sucessfully installed ###\n")
#         devtoolsIsInstalled <- TRUE
#       },
#       warning = function(w) {
#         stop("devtools installation exited with warning")
#       },
#       error = function(e) {
#         stop("devtools could not be installed")
#       }
#     )
#   } else {
#     devtoolsIsInstalled <- TRUE
#   }
# tryCatch(expr = {
#
#            cat("Install nvimcom dependencies if required\n")
# devtools::install_deps(pkg = pathNvimcom,
#                        quiet = FALSE,
#                        upgrade = "always")
#     },
# warning = function(w){},
# error = function(e){})

# Abhaengigkeiten aus der NAMESPACE-Datei
# (muss manuell geparsed werden),
# da kein entsprechendes R-Paket gefunden
# wurde.
# pathNAMESPACE <- paste0(pathNvimcom, "NAMESPACE")
# contentNAMESPACE <- readLines(file.path(pathNAMESPACE))
# linesImport <- grep(pattern = "^import.*$",
#                     x = contentNAMESPACE,
#                     ignore.case = FALSE)
# depsNAMESPACE <- unique(
#   sub(
#     pattern = "^import(From|)\\(([[:alnum:]_]+)(,[[:alnum:]_]+|)\\)$",
#     replacement = "\\2",
#     x = contentNAMESPACE[linesImport]
#   )
# )
# invisible(
# sapply(
#   X = depsNAMESPACE,
#   FUN = function(dp) {
#     if (!(dp %in% installed.packages()[, "Package"])) {
#       tryCatch(
#         expr = {
#           install.packages(pkgs = dp,
#                            dependencies = TRUE)
#         },
#         warning = function(w) {
#           message(paste0(w))
#         },
#         error = function(w) {
#           message(paste0(e))
#         }
#       )
#     }
#   }
# )
# )

# }}}

srcPath <- paste0(projectPath, "renv/local/")
binPath <- paste0(projectPath, "renv/local/nvimcom/")

# Ggf. Verzeichnisse fuer Paketinstallationen durch Renv
# aus unbekannten Quellen erzeugen
if (!dir.exists(file.path(srcPath))) {
  dir.create(path = srcPath)
}
if (!dir.exists(file.path(binPath))) {
  dir.create(path = binPath)
}

# Source-Paket archivieren und ablegen

# Versionsnummer des Pakets Nvimcom parsen
contentDESCRIPTION <-
  readLines(con = file.path(paste0(pathNvimcom, "/DESCRIPTION")))
line <- grep(
  pattern = "Version",
  x = contentDESCRIPTION
)
vNvimcom <- sub(
  pattern = "^Version: (.*)$",
  replacement = "\\1",
  x = contentDESCRIPTION[line],
  perl = TRUE
)
srcTarBallName <- paste0(
  "Nvimcom_",
  vNvimcom,
  ".tar.gz"
)
if (!(file.exists(file.path(paste0(srcPath, srcTarBallName))))) {
  invisible(
    devtools::build(
      pkg = file.path(pathNvimcom),
      path = file.path(srcPath),
      quiet = FALSE,
      binary = FALSE
    )
  )
}

# devtools::check(file.path(pathNvimcom))
pathBinary <- devtools::build(
  pkg = file.path(pathNvimcom),
  path = file.path(binPath),
  quiet = FALSE,
  binary = TRUE
)

# Binary-Paket umbenennen gemaess Namenskonvention von Renv,
# falls noetig

# Der richtige, also betriebssystemabhaengige Suffix wird
# durch devtools::build() erzeugt und im Folgenden geparst.
# Ein R-Binary-Paket hat die folgenden Suffizes:
# Windows .zip
# macOS   .tgz
# Linux   .tar.gz
# Siehe https://rstudio.github.io/renv/articles/local-sources.html
archiveSuffix <- sub(
  pattern = "^.*(\\..*)$",
  replacement = "\\1",
  x = basename(pathBinary),
  perl = TRUE
)
binTarBallName <- paste0(
  "Nvimcom_",
  vNvimcom,
  archiveSuffix
)
if (binTarBallName != basename(pathBinary)) {
  invisible(file.rename(
    from = file.path(pathBinary),
    to = file.path(
      paste0(
        binPath,
        binTarBallName
      )
    )
  ))
}
# Installiere Paket "Nvimcom", falls nicht bereits geschehen {{{
if (!("nvimcom" %in% installed.packages()[, "Package"])) {
  install.packages(
    pkgs = file.path(pathNvimcom),
    type = "source",
    quiet = FALSE,
    repos = NULL
  )
} else {
  if (sub(
    x = utils::packageVersion(pkg = "nvimcom"),
    pattern = "-",
    replacement = "."
  ) != vNvimcom) {
    install.packages(
      pkgs = file.path(pathNvimcom),
      type = "source",
      quiet = FALSE,
      repos = NULL
    )
  }
}
# }}}
